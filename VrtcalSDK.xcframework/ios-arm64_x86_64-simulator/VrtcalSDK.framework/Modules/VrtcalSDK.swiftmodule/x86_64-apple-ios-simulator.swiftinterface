// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9 (swiftlang-5.9.0.128.108 clang-1500.0.40.1)
// swift-module-flags: -target x86_64-apple-ios11.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name VrtcalSDK
// swift-module-flags-ignorable: -enable-bare-slash-regex
import AVFoundation
import AdSupport
import AppTrackingTransparency
import CommonCrypto
import CoreLocation
import CoreMotion
import CoreTelephony
import Darwin
import Foundation
import JavaScriptCore
import OMSDK_Vrtcal
import ObjectiveC
import StoreKit
import Swift
import UIKit
@_exported import VrtcalSDK
import WebKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
import Darwin.POSIX.sys.utsname
public enum JsonSerializationHelperError : Swift.Error {
  case couldNotEncodeToData
  case jsonSerializationError(any Swift.Error)
  case notStringAnyDict
}
public enum JsonSerializationHelper {
  public static func stringAnyDict(string: Swift.String) -> Swift.Result<[Swift.String : Any], JsonSerializationHelperError>
  public static func stringAnyDict(data: Foundation.Data) -> Swift.Result<[Swift.String : Any], JsonSerializationHelperError>
}
public enum VRTErrorCode : Swift.String {
  case customEvent
  case internalSdk
  case invalidAdContent
  case invalidState
  case invalidParam
  case noFill
  case serverError
  case timedOut
  case throttled
  case unknown
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct VRTError : Swift.Error {
  public let vrtErrorCode: VRTErrorCode
  public let message: Swift.String
  public init(vrtErrorCode: VRTErrorCode, message: Swift.String)
}
extension VRTError : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
extension VRTError : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
  public var failureReason: Swift.String? {
    get
  }
  public var recoverySuggestion: Swift.String? {
    get
  }
  public var helpAnchor: Swift.String? {
    get
  }
}
extension VRTError {
  public init(vrtErrorCode: VRTErrorCode, error: (any Swift.Error)?)
  public init(customEventError: (any Swift.Error)?)
  public static let customEventViewControllerNil: VRTError
}
extension Foundation.Data {
  public var prettyPrintedJSONString: Swift.String {
    get
  }
}
public struct VRTCustomEventConfig {
  public var thirdPartyCustomEventData: [Swift.String : Any]
  public var adSize: CoreFoundation.CGSize
}
extension VRTCustomEventConfig {
  public func thirdPartyAppId(customEventLoadDelegate: (any VRTCustomEventLoadDelegate)?) -> Swift.String?
  public func thirdPartyAdUnitId(customEventLoadDelegate: (any VRTCustomEventLoadDelegate)?) -> Swift.String?
  public func thirdPartyWidth(customEventLoadDelegate: (any VRTCustomEventLoadDelegate)?) -> Swift.Int
  public func thirdPartyHeight(customEventLoadDelegate: (any VRTCustomEventLoadDelegate)?) -> Swift.Int
}
extension VRTCustomEventConfig : Swift.Equatable {
  public static func == (lhs: VRTCustomEventConfig, rhs: VRTCustomEventConfig) -> Swift.Bool
}
extension CoreLocation.CLAuthorizationStatus : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
@objc open class VRTAbstractCustomEvent : ObjectiveC.NSObject {
  final public let customEventConfig: VRTCustomEventConfig
  weak public var viewControllerDelegate: (any ViewControllerDelegate)?
  weak public var customEventLoadDelegate: (any VRTCustomEventLoadDelegate)?
  weak public var customEventShowDelegate: (any VRTCustomEventShowDelegate)?
  required public init(customEventConfig: VRTCustomEventConfig, viewControllerDelegate: (any ViewControllerDelegate)?)
  @objc deinit
}
public func VRTLogInfo(_ message: Swift.String = "", file: Swift.StaticString = #file, line: Swift.UInt = #line, column: Swift.UInt = #column, function: Swift.StaticString = #function)
public func VRTLogWarn(_ message: Swift.String = "", file: Swift.StaticString = #file, line: Swift.UInt = #line, column: Swift.UInt = #column, function: Swift.StaticString = #function)
public func VRTLogError(_ message: Swift.String = "", file: Swift.StaticString = #file, line: Swift.UInt = #line, column: Swift.UInt = #column, function: Swift.StaticString = #function)
public func VRTLogAlways(_ message: Swift.String = "", file: Swift.StaticString = #file, line: Swift.UInt = #line, column: Swift.UInt = #column, function: Swift.StaticString = #function)
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class VRTLog : ObjectiveC.NSObject {
  public static let singleton: VRTLog
  public var writeToFile: Swift.Bool
  public func getFileAsString() -> Swift.String
  public func clearFile()
  @objc deinit
}
extension Swift.Result where Success == () {
  public static func success() -> Swift.Result<Success, Failure>
}
extension Swift.Result {
  public func getError() -> Failure?
}
extension Swift.Result where Failure == VRTError {
  public func getSuccess(failureHandler: (VRTError) -> ()) -> Success?
}
@_inheritsConvenienceInitializers @objc public class VRTInterstitial : ObjectiveC.NSObject {
  @objc weak public var adDelegate: (any VRTInterstitialDelegate)?
  @objc override dynamic public init()
  @objc public func loadAd(_ zoneId: Swift.Int)
  @objc public func showAd()
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc public class VRTNativeDomainModel : ObjectiveC.NSObject {
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class VRTAbstractBannerCustomEvent : VRTAbstractCustomEvent {
  open func loadBannerAd()
  open func getView() -> UIKit.UIView?
  required public init(customEventConfig: VRTCustomEventConfig, viewControllerDelegate: (any ViewControllerDelegate)?)
  @objc deinit
}
@objc public protocol ViewControllerDelegate {
  @objc func vrtViewControllerForModalPresentation() -> UIKit.UIViewController?
}
@objc @_inheritsConvenienceInitializers open class VRTAbstractInterstitialCustomEvent : VRTAbstractCustomEvent {
  open func loadInterstitialAd()
  open func showInterstitialAd()
  required public init(customEventConfig: VRTCustomEventConfig, viewControllerDelegate: (any ViewControllerDelegate)?)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class VrtcalSDK : ObjectiveC.NSObject {
  public class var sessionId: Swift.String? {
    get
  }
  public class var debugSpecificTestAd: Swift.String? {
    get
    set(debugSpecificTestAd)
  }
  @objc public class func initializeSdk(withAppId appId: Swift.Int, sdkDelegate: (any VrtcalSdkDelegate)?)
  @objc public class func setServerUrl(_ serverUrl: Foundation.URL)
  @objc public class func sdkVersion() -> Swift.String
  @objc public class func setPiiData(_ piiData: Swift.String?)
  @objc public class func setPiiDataTypes(_ piiDataTypes: Swift.String?)
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class VRTBanner : UIKit.UIView {
  @objc @_Concurrency.MainActor(unsafe) weak public var adDelegate: (any VRTBannerDelegate)?
  @_Concurrency.MainActor(unsafe) public var isDaast: Swift.Bool {
    get
    set(isDaast)
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc @_Concurrency.MainActor(unsafe) public func loadAd(_ zoneId: Swift.Int)
  @objc @_Concurrency.MainActor(unsafe) public func playDAAST()
  @objc deinit
}
@objc public protocol VRTNativeDelegate {
  @objc func vrtNativeAdLoaded(vrtNative: VRTNative, vrtNativeDomainModel: VRTNativeDomainModel)
  @objc func vrtNativeAdFailedToLoad(vrtNative: VRTNative, error: any Swift.Error)
}
@objc public protocol VRTBannerDelegate2 : ViewControllerDelegate {
}
@_inheritsConvenienceInitializers @objc public class VRTNative : ObjectiveC.NSObject {
  @objc public var adDelegate: (any VRTNativeDelegate)?
  @objc public func loadAd(_ zoneId: Swift.Int)
  @objc override dynamic public init()
  @objc deinit
}
@objc public protocol VRTBannerDelegate : ViewControllerDelegate {
  @objc func vrtBannerAdLoaded(_ vrtBanner: VRTBanner, withAdSize adSize: CoreFoundation.CGSize)
  @objc func vrtBannerAdFailedToLoad(_ vrtBanner: VRTBanner, error: any Swift.Error)
  @objc func vrtBannerAdClicked(_ vrtBanner: VRTBanner)
  @objc func vrtBannerWillPresentModal(_ vrtBanner: VRTBanner, of modalType: VRTModalType)
  @objc func vrtBannerDidPresentModal(_ vrtBanner: VRTBanner, of modalType: VRTModalType)
  @objc func vrtBannerWillDismissModal(_ vrtBanner: VRTBanner, of modalType: VRTModalType)
  @objc func vrtBannerDidDismissModal(_ vrtBanner: VRTBanner, of modalType: VRTModalType)
  @objc func vrtBannerAdWillLeaveApplication(_ vrtBanner: VRTBanner)
  @objc func vrtBannerVideoStarted(_ vrtBanner: VRTBanner)
  @objc func vrtBannerVideoCompleted(_ vrtBanner: VRTBanner)
}
@objc public enum VRTModalType : Swift.Int {
  case unknown = -1
  case interstitial = 0
  case mraidExpand = 1
  case mraidResize = 2
  case mraidVideo = 3
  case storeKit = 4
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public protocol VRTCustomEventLoadDelegate : AnyObject {
  func customEventLoaded()
  func customEventFailedToLoad(vrtError: VRTError)
}
public protocol VRTCustomEventShowDelegate : AnyObject {
  func customEventShown()
  func customEventFailedToShow(vrtError: VRTError)
  func customEventClicked()
  func customEventWillLeaveApplication()
  func customEventWillPresentModal(_ modalType: VRTModalType)
  func customEventDidPresentModal(_ modalType: VRTModalType)
  func customEventWillDismissModal(_ modalType: VRTModalType)
  func customEventDidDismissModal(_ modalType: VRTModalType)
  func customEventAddSubviewBackIntoBanner(afterResizeOrOnePartExpand view: UIKit.UIView)
  func customEventVideoStarted()
  func customEventVideoCompleted()
}
@objc public protocol VrtcalSdkDelegate {
  @objc func sdkInitialized()
  @objc func sdkInitializationFailedWithError(_ error: any Swift.Error)
}
public enum CodableHelperError : Swift.Error, Swift.CustomStringConvertible, Swift.Equatable {
  case encodingError(errorString: Swift.String)
  case decodingError(errorString: Swift.String, jsonString: Swift.String)
  public var description: Swift.String {
    get
  }
  public static func == (a: CodableHelperError, b: CodableHelperError) -> Swift.Bool
}
@objc public protocol VRTInterstitialDelegate : ViewControllerDelegate {
  @objc func vrtInterstitialAdLoaded(_ vrtInterstitial: VRTInterstitial)
  @objc func vrtInterstitialAdFailed(toLoad vrtInterstitial: VRTInterstitial, error: any Swift.Error)
  @objc func vrtInterstitialAdWillShow(_ vrtInterstitial: VRTInterstitial)
  @objc func vrtInterstitialAdDidShow(_ vrtInterstitial: VRTInterstitial)
  @objc func vrtInterstitialAdFailed(toShow vrtInterstitial: VRTInterstitial, error: any Swift.Error)
  @objc func vrtInterstitialAdClicked(_ vrtInterstitial: VRTInterstitial)
  @objc func vrtInterstitialAdWillLeaveApplication(_ vrtInterstitial: VRTInterstitial)
  @objc func vrtInterstitialAdWillDismiss(_ vrtInterstitial: VRTInterstitial)
  @objc func vrtInterstitialAdDidDismiss(_ vrtInterstitial: VRTInterstitial)
  @objc func vrtInterstitialVideoStarted(_ vrtInterstitial: VRTInterstitial)
  @objc func vrtInterstitialVideoCompleted(_ vrtInterstitial: VRTInterstitial)
}
extension VRTErrorCode : Swift.Equatable {}
extension VRTErrorCode : Swift.Hashable {}
extension VRTErrorCode : Swift.RawRepresentable {}
extension VRTModalType : Swift.Equatable {}
extension VRTModalType : Swift.Hashable {}
extension VRTModalType : Swift.RawRepresentable {}
